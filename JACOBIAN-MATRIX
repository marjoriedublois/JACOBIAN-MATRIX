import numpy as np 
import math
import PySimpleGUI as sg
import pandas as pd 

# GUI code

sg.theme('Black')

#Excel read code

EXCEL_FILE = 'SHERICAL_MANIPULATOR_FK.xlsx'
df = pd.read_excel(EXCEL_FILE)

# Lay-out code

layout = [
    [sg.Push(), sg.Text('SPHERICAL MANIPULATOR MEXE CALCULATOR', font = ('Britannic Bold', 30)), sg.Push()],

    [sg.Push(), sg.Text('Forward Kinematics Calculator', font = ('Britannic Bold', 20)), sg.Push()],

    [sg.Push(), sg.Button('Click this before Solving Forward Kinematics', font=('Arial Black', 15), 
    size=(35,0), button_color=('red', 'light yellow')), sg.Push(),
    sg.Text ('Fill out the following fields:', font = ('Verdana', 12)), sg.Push()],

    [sg.Push(), sg.Button('Jacobian Matrix (J)', font = ('Comic Sans MS', 12), size = (15, 0), button_color=('white', 'light green')),
    sg.Button('Det(J)', font = ('Comic Sans MS', 12), size = (15, 0), button_color=('white', 'light green')),
    sg.Button('Inverse of J', font = ('Comic Sans MS', 12), size = (15, 0), button_color=('white', 'light green')),
    sg.Button('Transpose of J', font = ('Comic Sans MS', 12), size = (15, 0), button_color=('white', 'light green')), 
    sg.Push(), sg.Text ('a1 = ', font = ('Verdana', 12)), sg.InputText('70', key='a1', size=(20, 10)),
    sg.Text('T1 = ', font = ('Verdana', 12)), sg.InputText('0', key='T1', size=(20, 10))],

    [sg.Push(), sg.Text ('a2 = ', font = ('Verdana', 12)), sg.InputText('80', key='a2', size=(20, 10)),
    sg.Text('T2 = ', font = ('Verdana', 12)), sg.InputText('0', key='T2', size=(20, 10))],

    [sg.Push(), sg.Button('Inverse Kinematics', font=('Comic Sans MS', 15), size=(35,0), button_color=('black', 'light blue')), sg.Push(),
    sg.Text ('a3 = ', font = ('Verdana', 12)), sg.InputText('40', key='a3', size=(20, 10)),
    sg.Text('d3 = ', font = ('Verdana', 12)), sg.InputText('100', key='d3', size=(20, 10))],

    [sg.Push(), sg.Button('Path and Trajectory Planning', font = ('Comic Sans MS', 12), size = (40, 0), button_color=('gray', 'white')), sg.Push(),
    sg.Push(), sg.Button('Solve Forward Kinematics', tooltip = 'Go first to "Click this before Solving Forward Kinematics"!', font = ('Comic Sans MS', 12), 
    button_color=('white', 'violet')), sg.Push()],

    [sg.Push(), sg.Frame('Position Vector: ',[[    
        sg.Text ('X', font = ('Verdana', 12)), sg.InputText(key='X', size=(10, 1)),
        sg.Text ('Y', font = ('Verdana', 12)), sg.InputText(key='Y', size=(10, 1)),
        sg.Text ('Z', font = ('Verdana', 12)), sg.InputText(key='Z', size=(10, 1))]])], 

    [sg.Image('Spherical snap.gif'), 
    sg.Push(), sg.Frame('H0_3 Transformation Matrix = ',[[sg.Output(size=(60, 12))]])],
    [sg.Push(), sg.Submit(font=('Verdana', 10)), sg.Exit(font=('Verdana', 10))]

    ]

#Window Code
window = sg.Window('Spherical Manipulator Forward Kinematics',layout, resizable=True)

def clear_input():
    for key in values:
        window[key]('')
    return None

#Variable Codes for disabling buttons

disable_J = window['Jacobian Matrix (J)']
disable_DetJ = window['Det(J)']
disable_IV = window['Inverse of J']
disable_TJ = window['Transpose of J']
disable_IK = window['Inverse Kinematics']
disable_PT = window['Path and Trajectory Planning']

while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Exit':
        break
    
    if event == 'Click this before Solving Forward Kinematics':
        disable_J.update(disabled=True)
        disable_DetJ.update(disabled=True)
        disable_IV.update(disabled=True)
        disable_TJ.update(disabled=True)
        disable_IK.update(disabled=True)
        disable_PT.update(disabled=True)

    if event == 'Solve Forward Kinematics':
        # Forward Kinematic Codes

        # link lengths in cm
        a1 = float(values['a1'])
        a2 = float(values['a2'])
        a3 = float(values['a3'])
          
        # Joint Variable Thetas in Degrees
        T1 = float(values['T1'])
        T2 = float(values['T2'])
        d3 = float(values['d3'])

        T1 = (T1/180.0)*np.pi #Theta 1 in radian
        T2 = (T2/180.0)*np.pi #Theta 2 in radian

        DHPT = [
              [T1,(90.0/180.0)*np.pi, 0, a1],
              [(T2+(90.0/180.0)*np.pi),((90.0/180.0)*np.pi), 0, 0],
              [0, 0, 0, a2+a3+d3]
              ]

        # D-H Notation Formula for HTM
        i = 0
        H0_1 = [
            [np.cos(DHPT[i][0]), -np.sin(DHPT[i][0])*np.cos(DHPT[i][1]), np.sin(DHPT[i][0])*np.sin(DHPT[i][1]), DHPT[1][2]*np.cos(DHPT[i][0])],
            [np.sin(DHPT[i][0]), np.sin(DHPT[i][0])*np.cos(DHPT[i][1]), -np.cos(DHPT[i][0])*np.sin(DHPT[i][1]), DHPT[1][2]*np.sin(DHPT[i][0])],
            [0, np.sin(DHPT[i][1]), np.cos(DHPT[i][1]), DHPT[i][3]],
            [0, 0, 0, 1]]

        i = 1
        H1_2 = [
            [np.cos(DHPT[i][0]), -np.sin(DHPT[i][0])*np.cos(DHPT[i][1]), np.sin(DHPT[i][0])*np.sin(DHPT[i][1]), DHPT[1][2]*np.cos(DHPT[i][0])],
            [np.sin(DHPT[i][0]), np.sin(DHPT[i][0])*np.cos(DHPT[i][1]), -np.cos(DHPT[i][0])*np.sin(DHPT[i][1]), DHPT[1][2]*np.sin(DHPT[i][0])],
            [0, np.sin(DHPT[i][1]), np.cos(DHPT[i][1]), DHPT[i][3]],
            [0, 0, 0, 1]]
        
        i = 2
        H2_3 = [
            [np.cos(DHPT[i][0]), -np.sin(DHPT[i][0])*np.cos(DHPT[i][1]), np.sin(DHPT[i][0])*np.sin(DHPT[i][1]), DHPT[1][2]*np.cos(DHPT[i][0])],
            [np.sin(DHPT[i][0]), np.sin(DHPT[i][0])*np.cos(DHPT[i][1]), -np.cos(DHPT[i][0])*np.sin(DHPT[i][1]), DHPT[1][2]*np.sin(DHPT[i][0])],
            [0, np.sin(DHPT[i][1]), np.cos(DHPT[i][1]), DHPT[i][3]],
            [0, 0, 0, 1]]
        
        #print('H0_1 = ')
        #print(np.matrix(H0_1))
        #print('H1_2 = ')
        #print(np.matrix(H1_2))
        #print('H2_3 = ')
        #print(np.matrix(H2_3))


        H0_2 = np.dot(H0_1,H1_2)
        H0_3 = np.dot(H0_2,H2_3)

        print('H0_3 = ')
        print(np.matrix(H0_3))

        # Position Vector X Y Z

        X0_3 = H0_3[0,3]
        print("X = ", X0_3)

        Y0_3 = H0_3[1,3]
        print("Y = ", Y0_3)

        Z0_3 = H0_3[2,3]
        print("Z = ", Z0_3)

        disable_J.update(disabled=False)
        disable_IK.update(disabled=False)
        disable_PT.update(disabled=False)
        
    if event == 'Submit':
        df = df.append(values, ignore_index=True)   
        df.to_excel(EXCEL_FILE, index=False)
        sg.popup('Data saved!')

    if event == 'Jacobian Matrix (J)':
        #Z_1 = [[0],[0],[1]] #the [0,0,1] vector

       #  Row 1 - 3, Column 1
        #J1 = [[1,0,0],[0,1,0],[0,0,1]]
        #J1 = np.dot(J1,Z_1)
        #J1 = np.matrix(J1)
        #print('J1 = ')
        #print(np.matrix(J1))
         
        # Row 1 - 3, Column 2
        try: 
            H0_1 = np.matrix(H0_1)
        except:
            H0_1 = -1 #NAN  
            sg.popup('WARNING!')
            sg.popup('Restart the GUI then go first to "Click this before Solving Forward Kinematics"!')
            break

        # Defining the equations

        IM = [[1,0,0],[0,1,0],[0,0,1]]
        i = [[0],[0],[1]]
        d0_3 = H0_3[0:3,3:]

        # Row 1 - 3 column 1
        J1a = (np.dot(IM,i))

        # Cross product of Row 1 - 3 column 1

        J1 = [
            [(J1a[1,0]*d0_3[2,0])-(J1a[2,0]*d0_3[1,0])],
            [(J1a[2,0]*d0_3[0,0])-(J1a[0,0]*d0_3[2,0])],
            [(J1a[0,0]*d0_3[1,0])-(J1a[1,0]*d0_3[0,0])]
            ]

        # Row 1 - 3 column 2
        R0_1a = np.dot(H0_1,1)
        R0_1b = R0_1a[0:3, 0:3]
        d0_1 = R0_1a[0:3,3:]
        J2a = (np.dot(R0_1b,i))
        J2b = (np.subtract(d0_3,d0_1))

        # Cross product of Row 1 - 3 column 2

        J2 = [
            [(J2a[1,0]*J2b[2,0])-(J2a[2,0]*J2b[1,0])],
            [(J2a[2,0]*J2b[0,0])-(J2a[0,0]*J2b[2,0])],
            [(J2a[0,0]*J2b[1,0])-(J2a[1,0]*J2b[0,0])]
            ]

        # Row 1 - 3 column 3
        R0_2 = H0_2[0:3,0:3]
        J3 = (np.dot(R0_2,i))
        J3a = [[0], [0], [0]]

        # Jacobian Matrix
        JM1 = np.concatenate((J1, J2, J3), 1)
        JM2 = np.concatenate((J1a, J2a, J3a), 1)
        Jacobian = np.concatenate((JM1, JM2), 0)
        sg.popup('J =', Jacobian)

        DJ = np.linalg.det(JM1)
        if DJ == 0.00000 or DJ == -0 : 
            disable_IV.update(disabled=True)
            sg.popup('Warning: Jacobian Matrix is Non-Invertible!')
        
        elif DJ != 0.00000 or DJ != -0 :
            disable_IV.update(disabled=False)

        disable_J.update(disabled=True)
        disable_DetJ.update(disabled=False)
        disable_TJ.update(disabled=False)

    if event == 'Det(J)':
        # Singularity = Det(J)
        # np.linalg.    det(M)
        # Let JM1 become the 3x3 position matrix for obtaining  the Determinant

        try: 
            JM1 = np.concatenate((J1,J2,J3),1)
        except:
            JM1 = -1 #NAN  
            sg.popup('WARNING!')
            sg.popup('Restart the GUI then go first to "Click this before Solving Forward Kinematics"!')
            break

        DJ = np.linalg.det(JM1)
        #print("DJ = ",DJ)
        sg.popup('DJ = ', DJ)
      
        if DJ == 0.00000 or DJ == -0 :
            disable_IV.update(disabled=True)
            sg.popup('Warning: Jacobian Matrix is Non-Invertible!')

    if event == 'Inverse of J':
        # Inv(J)

        try: 
            JM1 = np.concatenate((J1,J2,J3),1)
        except:
            JM1 = -1 #NAN  
            sg.popup('WARNING!')
            sg.popup('Restart the GUI then go first to "Click this before Solving Forward Kinematics"!')
            break
    
        IJ = np.linalg.inv (JM1)
        #print("IV =")
        #print(IV)
        sg.popup('IJ = ',IJ)
    
    if event == 'Transpose of J':
        #Transpose of Jacobian Matrix

        try: 
            JM1 = np.concatenate((J1,J2,J3),1)
        except:
            JM1 = -1 #NAN   
            sg.popup('WARNING!')
            sg.popup('Restart the GUI then go first to "Click this before Solving Forward Kinematics"!')
            break

        TJ = np.transpose(JM1)
        #print("TJ= ",TJ)

        sg.popup('TJ = ',TJ)
 

window.close()

